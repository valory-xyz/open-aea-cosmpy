[tox]
envlist = py310
isolated_build = True



[testenv]
basepython = python3
passenv = *
extras = all
deps =
  poetry

[testenv:docs]
skipsdist = True
skip_install = True
commands = 
  poetry install --only docs
  poetry run mkdocs build --clean

[testenv:docs-serve]
skipsdist = True
skip_install = True
commands = 
  poetry install --only docs
  poetry run mkdocs build --clean
  poetry run python -c 'print("###### Starting local server. Press Control+C to stop server ######")'
  poetry run mkdocs serve -a localhost:8080

[testenv:flake8]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py "flake8.*"
  poetry run flake8 cosmpy examples scripts tests

[testenv:black-check]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py black
  poetry run black --check --verbose cosmpy tests examples --exclude protos

[testenv:black]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py black
  poetry run black cosmpy tests examples --exclude protos

[testenv:isort-check]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py isort
  poetry run isort --check-only --verbose cosmpy tests examples

[testenv:isort]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py isort
  poetry run isort cosmpy tests examples

[testenv:vulture]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py vulture
  poetry run vulture cosmpy tests examples --exclude "*_pb2.py,*_pb2_grpc.py" --min-confidence 100

[testenv:bandit]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py bandit
  poetry run bandit -r cosmpy tests --skip B101
  poetry run bandit -r examples --skip B101,B105

[testenv:safety]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py safety
  poetry run safety check -i 41002

[testenv:mypy]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py mypy
  poetry run mypy cosmpy tests examples

[testenv:pylint]
skipsdist = True
skip_install = True
commands = 
  poetry install --with main --with dev
  poetry run python ./install_packages.py pylint
  poetry run pylint cosmpy tests examples


[testenv:test]
skipsdist = True
skip_install = True
commands = 
  poetry install --only test --only main
  poetry run coverage run -m pytest tests --doctest-modules --ignore tests/vulture_whitelist.py

[testenv:test-unit]
skipsdist = True
skip_install = True
commands = 
  poetry install --only test --only main
  poetry run coverage run -m pytest tests --doctest-modules --ignore tests/vulture_whitelist.py -m "not integration"

[testenv:test-integration]
skipsdist = True
skip_install = True
commands = 
  poetry install --only test --only main
  poetry run coverage run -m pytest tests --doctest-modules --ignore tests/vulture_whitelist.py -m "integration"

[testenv:coverage-report]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py coverage
  poetry run coverage report -m -i

[testenv:liccheck]
skipsdist = True
skip_install = True
whitelist_externals = 
  poetry
  bash
commands = 
  poetry install --only main
  poetry run python ./install_packages.py liccheck
  bash -c "poetry export > tmp-requirements.txt"
  bash -c "pip freeze> frozen"
  poetry run liccheck -s strategy.ini -r tmp-requirements.txt -l PARANOID
commands_post = bash -c "rm -f tmp-requirements.txt"

[testenv:copyright-check]
skipsdist = True
skip_install = True
commands = python scripts/check_copyright.py

[testenv:check-manifest]
skipsdist = True
skip_install = True
commands = 
  poetry run python ./install_packages.py check-manifest
  poetry run check-manifest

[testenv:check_api_docs]
skipsdist = True
usedevelop = True
commands = 
  poetry run python ./install_packages.py pydoc-markdown
  poetry run python scripts/generate_api_docs.py --check-clean
